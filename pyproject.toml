[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=80",
  "setuptools_scm>=9",
]

[project]
name = "python-application-template"
description = "Template for projects"
authors = [
  { name = "Author Name", email = "email@email.com" },
]
requires-python = ">=3.11"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dynamic = [
  "dependencies",
  "optional-dependencies",
  "readme",
  "version",
]

[project.scripts]
python-application-template = "python_application_template.__main__:main"

[tool.setuptools]
zip-safe = true
include-package-data = false
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools_scm]
version_scheme = "only-version"
git_describe_command = "git describe --tags --abbrev=1"
fallback_version = "0.1.0"
local_scheme = "no-local-version"

[tool.setuptools.dynamic]
dependencies = { file = [
  "requirements/requirements.txt",
] }

readme = { file = [
  "README.md",
], content-type = "text/markdown" }

[tool.setuptools.dynamic.optional-dependencies]
dev = { file = "requirements/requirements-dev.txt" }

[tool.distutils.bdist_wheel]
universal = true

[tool.ruff]
target-version = "py311"
line-length = 128

lint.select = [
  "AIR",   # Airflow
  "ASYNC", # flake8-async
  "BLE",   # flake8-blind-except
  "C4",    # flake8-comprehensions
  "C90",   # McCabe cyclomatic complexity
  # "CPY",  # Copyright-related rules
  "DTZ",  # flake8-datetimez
  "E",    # pycodestyle
  "F",    # Pyflakes
  "FLY",  # flynt
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "INT",  # flake8-gettext
  "NPY",  # NumPy-specific rules
  "PL",   # Pylint
  "PYI",  # flake8-pyi
  "RSE",  # flake8-raise
  "RUF",  # Ruff-specific rules
  "S",    # flake8-bandit
  "SLOT", # flake8-slots
  "T10",  # flake8-debugger
  "TID",  # flake8-tidy-imports
  "UP",   # pyupgrade
  "W",    # pycodestyle
  "YTT",  # flake8-2020
  "A",    # flake8-builtins
  # "ANN",  # flake8-annotations
  "ARG", # flake8-unused-arguments
  "B",   # flake8-bugbear
  # "COM",  # flake8-commas
  "D", # pydocstyle
  # "DJ",   # flake8-django
  "EM", # flake8-errmsg
  "ERA",  # eradicate
  # "EXE",  # flake8-executable
  "FA",  # flake8-future-annotations
  "FBT", # flake8-boolean-trap
  "FIX", # flake8-fixme
  "G",   # flake8-logging-format
  # "INP",  # flake8-no-pep420
  "ISC", # flake8-implicit-str-concat
  "N",   # pep8-naming
  # "PD",   # pandas-vet
  "PERF", # Perflint
  "PGH", # pygrep-hooks
  "PIE", # flake8-pie
  "PT",  # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  # "Q",    # flake8-quotes
  "RET", # flake8-return
  "SIM", # flake8-simplify
  # "SLF",  # flake8-self
  "T20", # flake8-print
  "TCH", # flake8-type-checking
  "TD",  # flake8-todos
  "TRY",  # tryceratops
]

  [tool.ruff.format]
    quote-style = "single"
    skip-magic-trailing-comma = false

  [tool.ruff.lint.isort]
    known-first-party = ["src", "tests", "testing", "python-application-template"]
    split-on-trailing-comma = true
    required-imports = ["from __future__ import annotations"]
    force-single-line = true

  [tool.ruff.lint.pydocstyle]
    # convention = "numpy"
    convention = "google"

  [tool.ruff.lint.per-file-ignores]
    "tests/*" = ["S101", "D", "ANN", "PLR2004"] # allow assert, ignore missing docs, constant check
    "testing/*" = ["S101", "D"] # allow assert, ignore missing docs
    "__init__.py" = ["D", "F401"] # Ignore docstring, allow unused import
    "docs/*" = ["D"] # ignore missing docs

[tool.coverage.run]
branch = true
source = [
  "src",
]
relative_files = true
plugins = [
  "covdefaults",
]

[tool.mypy]
  plugins = ['pydantic.mypy']
  check_untyped_defs = true
  disallow_any_generics = true
  no_implicit_optional = true
  warn_redundant_casts = true
  warn_unused_ignores = true
  warn_unused_configs = true
  incremental = false

[[tool.mypy.overrides]]
  module = ["tests.*", "testing.*"]
  disallow_incomplete_defs = false
  disallow_untyped_defs = false

[tool.pydantic-mypy]
init_forbid_extra = true
warn_required_dynamic_aliases = false
