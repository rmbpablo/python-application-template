# name: Docker Image
#
# on:
#   push:
#     branches: [main]
#   release:
#     types: [published]
#   pull_request:
#     branches: [main]
#     types: [opened, reopened, synchronize, ready_for_review]
#
# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: true
#
# env:
#   REGISTRY: ghcr.io
#   IMAGE_NAME: ${{ github.repository }}
#   SHA: ${{ github.event.pull_request.head.sha || github.event.after }}
#
# jobs:
#   main:
#     runs-on: ubuntu-latest
#
#     permissions:
#       contents: read
#       packages: write
#       pull-requests: write
#
#     steps:
#       - uses: asottile/workflows/.github/actions/fast-checkout@v1.6.1
#         with:
#           ref: ${{ env.SHA }}
#
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
#
#       # Login against a Docker registry except on PR
#       - name: Login to GHCR
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
#
#       # Extract metadata (tags, labels) for Docker
#       - name: Extract Docker metadata
#         id: meta
#         uses: docker/metadata-action@v5
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#           labels: |
#             org.opencontainers.image.revision=${{ env.SHA }}
#           tags: |
#             type=schedule
#             type=ref,event=branch
#             type=ref,event=pr
#             type=semver,pattern={{version}}
#             type=semver,pattern={{major}}.{{minor}}
#             type=semver,pattern={{major}}
#             # set latest tag for default branch
#             type=raw,value=latest,enable={{is_default_branch}}
#
#       # Build and push Docker image with Buildx (don't push on PR)
#       - name: Build and push Docker image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           push: true
#           load: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max
#
#       # Check vulnerability in the docker using trivy
#       - name: Run Trivy vulnerability scanner
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref:  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
#           format: 'table'
#           exit-code: '1'
#           ignore-unfixed: true
#           vuln-type: 'os,library'
#           severity: 'CRITICAL,HIGH'
